import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Configure notification behavior
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

export interface NotificationPermissionStatus {
  granted: boolean;
  canAskAgain: boolean;
  status: 'granted' | 'denied' | 'undetermined';
}

export class NotificationService {
  private static readonly PERMISSION_ASKED_KEY = 'notification_permission_asked';
  private static readonly PERMISSION_STATUS_KEY = 'notification_permission_status';
  private static readonly PUSH_TOKEN_KEY = 'expo_push_token';

  /**
   * Check if the device supports push notifications
   */
  static isDeviceSupported(): boolean {
    return Device.isDevice && Platform.OS !== 'web';
  }

  /**
   * Get current notification permission status
   */
  static async getPermissionStatus(): Promise<NotificationPermissionStatus> {
    const { status, canAskAgain } = await Notifications.getPermissionsAsync();
    
    return {
      granted: status === 'granted',
      canAskAgain,
      status: status as 'granted' | 'denied' | 'undetermined',
    };
  }

  /**
   * Request notification permissions from the user
   */
  static async requestPermissions(): Promise<NotificationPermissionStatus> {
    if (!this.isDeviceSupported()) {
      return {
        granted: false,
        canAskAgain: false,
        status: 'denied',
      };
    }

    try {
      const { status, canAskAgain } = await Notifications.requestPermissionsAsync({
        ios: {
          allowAlert: true,
          allowBadge: true,
          allowSound: true,
          allowAnnouncements: false,
        },
      });

      const permissionStatus: NotificationPermissionStatus = {
        granted: status === 'granted',
        canAskAgain,
        status: status as 'granted' | 'denied' | 'undetermined',
      };

      // Store permission status
      await AsyncStorage.setItem(
        this.PERMISSION_STATUS_KEY,
        JSON.stringify(permissionStatus)
      );

      // Mark that we've asked for permission
      await AsyncStorage.setItem(this.PERMISSION_ASKED_KEY, 'true');

      return permissionStatus;
    } catch (error) {
      console.error('Error requesting notification permissions:', error);
      return {
        granted: false,
        canAskAgain: false,
        status: 'denied',
      };
    }
  }

  /**
   * Get Expo push token for sending notifications
   */
  static async getExpoPushToken(): Promise<string | null> {
    if (!this.isDeviceSupported()) {
      return null;
    }

    try {
      const { status } = await this.getPermissionStatus();
      
      if (status !== 'granted') {
        console.log('Notification permissions not granted');
        return null;
      }

      // Check if we already have a token stored
      const storedToken = await AsyncStorage.getItem(this.PUSH_TOKEN_KEY);
      if (storedToken) {
        return storedToken;
      }

      // Get new token
      const token = await Notifications.getExpoPushTokenAsync({
        projectId: process.env.EXPO_PUBLIC_PROJECT_ID || 'your-project-id',
      });

      // Store the token
      await AsyncStorage.setItem(this.PUSH_TOKEN_KEY, token.data);
      
      return token.data;
    } catch (error) {
      console.error('Error getting Expo push token:', error);
      return null;
    }
  }

  /**
   * Check if we've already asked for permission
   */
  static async hasAskedForPermission(): Promise<boolean> {
    try {
      const asked = await AsyncStorage.getItem(this.PERMISSION_ASKED_KEY);
      return asked === 'true';
    } catch (error) {
      console.error('Error checking permission asked status:', error);
      return false;
    }
  }

  /**
   * Get stored permission status
   */
  static async getStoredPermissionStatus(): Promise<NotificationPermissionStatus | null> {
    try {
      const stored = await AsyncStorage.getItem(this.PERMISSION_STATUS_KEY);
      return stored ? JSON.parse(stored) : null;
    } catch (error) {
      console.error('Error getting stored permission status:', error);
      return null;
    }
  }

  /**
   * Schedule a local notification (for testing)
   */
  static async scheduleTestNotification(): Promise<void> {
    const { status } = await this.getPermissionStatus();
    
    if (status === 'granted') {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "Welcome to Lovelock! ðŸ’•",
          body: "Your love journey begins now. Discover your perfect match!",
          data: { type: 'welcome' },
        },
        trigger: { seconds: 2 },
      });
    }
  }

  /**
   * Send promotional notification (local for testing)
   */
  static async sendPromotionalNotification(title: string, body: string): Promise<void> {
    const { status } = await this.getPermissionStatus();
    
    if (status === 'granted') {
      await Notifications.scheduleNotificationAsync({
        content: {
          title,
          body,
          data: { type: 'promotion' },
        },
        trigger: null, // Send immediately
      });
    }
  }

  /**
   * Clear all stored notification data (for testing/reset)
   */
  static async clearStoredData(): Promise<void> {
    try {
      await AsyncStorage.multiRemove([
        this.PERMISSION_ASKED_KEY,
        this.PERMISSION_STATUS_KEY,
        this.PUSH_TOKEN_KEY,
      ]);
    } catch (error) {
      console.error('Error clearing notification data:', error);
    }
  }
}

export default NotificationService;
